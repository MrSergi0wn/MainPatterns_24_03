using FluentAssertions;
using Moq;
using SpaceBattle.Actions;
using SpaceBattle.Adapter;
using System.Numerics;

namespace SpaceBattle.UnitTests.AdaptersTests
{
    public class AutoGenerationAdapterTests
    {
        [Fact]
        public void AutoGeneratedMovableAdapterTypeCheckTest()
        {
            var ioc = new IocContainer.IocC();

            var objectToMove = new Mock<IMovable>();

            var adapter = ioc.Resolve<IMovable>("AutoGeneratedMovableAdapter", typeof(IMovable), objectToMove.Object);

            adapter.Should().BeOfType<AutoGeneratedMovableAdapter>();
        }

        [Fact]
        public void SetPositionWithAutoGeneratedMovableAdapterTest()
        {
            var ioc = new IocContainer.IocC();

            var movableObject = new Mock<IMovable>();

            movableObject.SetupProperty(o => o.Position);

            movableObject.Object.Position = new Vector2(1, 1);

            var adapter = ioc.Resolve<IMovable>("AutoGeneratedMovableAdapter", typeof(IMovable), movableObject.Object);

            adapter.Position = new Vector2(1, 2);

            adapter.Position.Should().Be(new Vector2(1, 2));
        }

        [Fact]
        public void GetPositionWithAutoGeneratedMovableAdapterTest()
        {
            var ioc = new IocContainer.IocC();

            var objectToMove = new Mock<IMovable>();

            objectToMove.SetupProperty(o => o.Position);

            objectToMove.Object.Position = new Vector2(1, 2);

            var adapter = ioc.Resolve<IMovable>("AutoGeneratedMovableAdapter", typeof(IMovable), objectToMove.Object);

            adapter.Position.Should().Be(new Vector2(1, 2));
        }

        [Fact]
        public void GetVelocityWithAutoGeneratedMovableAdapterTest()
        {
            var ioc = new IocContainer.IocC();

            var objectToMove = new Mock<IMovable>();

            objectToMove.Setup(o => o.Velocity).Returns(new Vector2(1, 5));

            var adapter = ioc.Resolve<IMovable>("AutoGeneratedMovableAdapter", typeof(IMovable), objectToMove.Object);

            adapter.Velocity.Should().Be(new Vector2(1, 5));
        }
    }
}
